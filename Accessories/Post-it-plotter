/* PROGRAM DESCRIPTION & PINOUT 
//Post-It-Plotter ONLY- Gcode Reading Program
//Very Similiar to the MUG-O-matic Program, though this version has different constants for the PoP.
//To fully optimize I need to modify the code to adjust the pen Up height as a function of the Y axis so it doesnt lift/drop so far when the arm is out. 
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*DECLARATIONS & CONSTANTS* 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
#include <Servo.h>

#define PIN_SERVO_CLAW 2 
#define PIN_SERVO_X 3
#define PIN_SERVO_Y 4
#define PIN_SERVO_Z 5
#define PIN_SERVO_CENTER 10

#define LINE_BUFFER_LENGTH 30//512
//#define MOVEMENT_MIN 0
//#define MOVEMENT_MAX 80 
//#define STEP_DELAY 25  //ms
#define BACKLASH 1.5
//#define POSITIVE true
//#define NEGATIVE false

//Naming Components & Global Variables
struct point {
  float x;
  boolean xDirection;
  float y;
  boolean yDirection;
  float z;
  boolean zDirection;
};
struct point actuatorPos;
Servo servoX;
Servo servoY;
Servo servoZ;
Servo servoCLAW;
Servo servoCENTER;
const int buzzerPin = 12; //Buzzer sound output pin is the embedded LED pin
const int ledPin = 13;

float deg2mmRack(float deg) {return deg/2.25;} //  Converts mm to degrees for the servos.  2.25 is hard set by 180deg/80mm motion
float mm2degRack(float mm) {return mm*2.25;} //  Converts mm to degrees for the servos. 2.25 is hard set by 180deg/80mm motion
float deg2mmPivot(float deg) {return deg/1.5;} //  Converts mm to degrees for the servos.  2.25 is hard set by 180deg/80mm motion
float mm2degPivot(float mm) {return mm*1.5;} //(2.25/1.8)  Converts mm to degrees for the servos. 2.25 is hard set by 180deg/80mm motion

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//*DEFINE DRAWING SETTINGS* 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
float BacklashAngleX = 1;//4;// deg added to all moves if a direction change occurs to account for slop/backlash in the system (This was a measured angle)
float BacklashAngleY = 1; //1 deg added to all moves if a direction change occurs to account for slop/backlash in the system (This was a measured angle)
float Resolution = 1.25;// 1.75; //mm of minimum DIRECT drawing resolution to consolidate impossible moves less than this distance into one movement of this length.
float DotResolution = .4;//1.0;// 1.75; //mm of minimum DOT drawing resolution to consolidate impossible moves less than this distance into one movement of this length.

int StepDelay = 30; //ms delay between steps to ensure steps are independent moves. 
int DotStepDelay = 60; //75 ms delay between steps to ensure steps are independent moves. 

int LineDelay = 150; //ms delay after line move to ensure move is completed
int penDelay = 250; //ms delay to ensure pen move is completed
float oldDirX =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
float newDirX =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
float oldDirY =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
float newDirY =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.

//Specific to Post-It-Plotter
//  Drawing Robot limits, in degrees
int Xdmin = 25;  
int Xdmax = 179; 
int Ydmin = 20;  
int Ydmax = 160;  
int Zdmin = 140; //70  // Drawing engagement position (Z-dir Reversed between post-it-Plotter & Mug-O-Matic)
float ZdTouch = 165; // The exact angle that you begin to touch pen to mug
int Zdmax = 180; // Lifted Pen Position

//  Calculated drawing robot limits, in mm
float Xmin = deg2mmPivot(Xdmin);
float Xmax = deg2mmPivot(Xdmax);
float Ymin = deg2mmRack(Ydmin);
float Ymax = deg2mmRack(Ydmax);
float Zmin = deg2mmRack(Zdmin);
float Zmax = deg2mmRack(Zdmax);
float Xpos = Xdmin;   //Home Position (deg)
float Ypos = Ydmin;  //Home Position (deg)
float Zpos = Zdmax; //Home Position (deg)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//*SETUP*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
void setup() {
  Serial.begin( 9600 );
  servoCLAW.attach( PIN_SERVO_CLAW );
  servoX.attach( PIN_SERVO_X );   actuatorPos.x = Xdmin; //The position is actually unknown when you turn it on 
  servoY.attach( PIN_SERVO_Y );   actuatorPos.y = Ydmax;
  servoZ.attach( PIN_SERVO_Z );   actuatorPos.z = Zdmax;
  servoCENTER.attach( PIN_SERVO_CENTER );  servoCENTER.write(179/2); //This servo pin is for assembly, it centers the servo
  //delay(1000);	
  home();
  
 //drawRect(Xmin,Ymin,Xmax,Ymax,true); //(x0, y0, x1, y1, boolean pen toggle (dry run if set false)). Units are millimeters
 // drawDotRect(Xmin+33,Ymin+29,Xmin+53,Ymin+49,true); //(x0, y0, x1, y1, boolean pen toggle (dry run if set false)). Units are millimeters
 //drawRectSpiral(Xmin,Ymin,Xmax,Ymax,6, true); //(x0, y0, x1, y1, spiral spacing, boolean pen toggle (dry run if set false)). Units are millimeters
  //drawCircle(40, 40, 30); //X position of center, y position of center, radius. Units are millimeters
//drawCircleSpiral(65, 40, 30, 3); //X position of center, y position of center, radius, spiral spacing. Units are millimeters
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//* Main loop*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{

void loop() {
  char line[ LINE_BUFFER_LENGTH ];
  char c; 
  int lineIndex;
  bool lineIsComment, lineIsSemiColon;
  bool commandFound; // has a command been found 
 
  lineIndex = 0;
  lineIsSemiColon = false;
  lineIsComment = false;
  commandFound = false;
 
 while (true) { 
    // Serial reception - Mostly from Grbl, added semicolon support
    while ( Serial.available()>0 ) {
      c = Serial.peek();
      if ( ( c == 'G' || c == 'M' ) && commandFound ) { // check if the next character starts a new command
        c = '\n'; // insert a end of line character and skip reading the serial buffer to end the command  
      }else {
        c = Serial.read();
      }
      switch (c) {
        case '\n': // End of line reached
        case '\r':                         
          if ( lineIndex > 0 && commandFound ) {                        // Line or command is complete. Then execute!
            line[ lineIndex ] = '\0';                   // Terminate string
            //Serial.print( "// Received "); Serial.println( line );
            processIncomingLine( line, lineIndex );
            lineIndex = 0;
            commandFound = false; // reset the command found flag to false
            lineIsComment = false;
            lineIsSemiColon = false;
          } else { 
            // Empty or comment line. Skip block.
          }
          break;
        case ';':
          lineIsSemiColon = true;
          break;
        case '(':
          lineIsComment = true;
          break;
        case ')':
          lineIsComment = false;
          break;
        case ' ':  // Throw away whitepace and control characters
        case '/':
          break;
        case 'G': 
        case 'M':
          commandFound = true;
        default:
          if ( (!lineIsComment) && (!lineIsSemiColon) ) {   // Only save if not comments
            if ( c >= 'a' && c <= 'z' ) {        // Upcase lowercase
              line[ lineIndex++ ] = c-'a'+'A';
            } else {
              line[ lineIndex++ ] = c;
            }
          }
          break;
       }
    }
  }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//*Function Definitions*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
 
/**********************
* void processIncomingLine( char* line, int charNB ) - Main loop
* char* line : Line to process
* int charNB : Number of characters
***********************/
void processIncomingLine( char* line, int charNB ) {
  int currentIndex = 0;
  char buffer[ 64 ];                                 // Hope that 64 is enough for 1 parameter
  struct point newPos;
  
  newPos = actuatorPos; // Set new position to current servo position, individual values are reused if new ones not list in command 
  
  while( currentIndex < charNB ) {
    switch ( line[ currentIndex++ ] ) {              // Select command, if any
      case 'G':
        switch ( atoi( line+currentIndex ) ){                   // Select G command
		  case 28: 
			home();
		  case 92: 
			break;
		  case 0:                                   // G00 & G01 - Movement or fast movement. Same here
		  case 1:
            char* indexX = strchr( line+currentIndex, 'X' );  // Get X/Y position in the string (if any)
            char* indexY = strchr( line+currentIndex, 'Y' );
            char* indexZ = strchr( line+currentIndex, 'Z' );
            if ( indexX != NULL ) { // Find new current position and direction of motion if available
              newPos.x = atoi( indexX + 1); // get value from the line char array as a int
            }          
            if ( indexY != NULL ) {
              newPos.y = atoi( indexY + 1); 
            }
			
            if ( indexZ != NULL ) { 
              newPos.z = atoi( indexZ + 1);
              if ( newPos.z < Zmax ){
				  penDown();
				  newPos.z = Zmin; Zpos = Zdmin;
			  }
              //if ( newPos.z >= Zdmax ){
				  else{
				  penUp(); newPos.z = Zmax; Zpos = Zdmax; 
				  }
			}
            //servoZ.write( newPos.z);   // Drop or lift z-axis 
            //			only run command if movement is required
			
            if ( actuatorPos.x!=newPos.x || actuatorPos.y!=newPos.y ){
				if(Zpos <= Zdmin){ 		//if(newPos.z == Zdmax){
					drawDotLine(newPos.x, newPos.y );
					newPos.z = Zmin;
					//drawLine(newPos.x, newPos.y );
				}
				else{
					drawLine(newPos.x, newPos.y );
				}
					
			}
            //Serial.println("ok"); // acknowledge as required by reprap standards to work with replicatorG
			
			actuatorPos = newPos; //Want to move to inside the line command but would be outside of scope
            break;
        }
        break;
      case 'M':
        buffer[0] = line[ currentIndex++ ];        // /!\ Dirty - Only works with 3 digit commands
        buffer[1] = line[ currentIndex++ ];
        buffer[2] = line[ currentIndex++ ];
        buffer[3] = '\0';
        switch ( atoi( buffer ) ){
          case 84:                                // M84 - kill motors
		  servoX.detach( );
		  servoY.detach( );
		  servoZ.detach( );
		  delay(9999999999); //Effectively kill unit indefinitely at endof job
            break;
          //default:
           // Serial.print( "!! Command not recognized : M");
           // Serial.println( buffer );
        }
    }
  }
}



void drawDotLine(float x2, float y2) { //Inputs are in mm, All Calcs within drawLine are in Deg!!
  //Note difference between positions: Original '0', Current 'pos', Ultimate Target 't', Immediate target '1'
 
  float x0 = Xpos; //current position in deg. 
  float y0 = Ypos; //current position in deg
  
  //Convert & SHIFT/INVERT ORIGIN!! Y axis inverted in Gcode.
  float xt = mm2degPivot(x2);//+Xdmin; //convert target position to DEG & offset by the unusuable initial X angle
  float yt = 179-mm2degRack(y2); //convert target position to DEG.
  
    //  Bring instructions within limits
  if (xt >= Xdmax) { xt = Xdmax; }
  if (xt <= Xdmin) { xt = Xdmin; }
  if (yt >= Ydmax) { yt = Ydmax; }
  if (yt <= Ydmin) { yt = Ydmin; }
 
  //Record the direction of this move for X & Y to help us correct for lost motion if the servo changes direction.
  oldDirX = newDirX; //Preserve the prior direction command
  oldDirY = newDirY; //Preserve the prior direction command
  newDirX = round((xt-x0)/abs((xt-x0+.00001))); //note the .0001 is to prevent divide by zero err. These variables are INT so it will round off. Can only be -1,0,1
  newDirY = round((yt-y0)/abs((yt-y0+.00001)));
	if (newDirX != oldDirX && newDirX != 0){
		xt = xt + BacklashAngleX*newDirX; //BacklashAngle = magnitude, newDir = direction
	}
	if (newDirY != oldDirY && newDirY != 0){
		yt = yt + BacklashAngleY*newDirY; //BacklashAngle = magnitude, newDir = direction
	}
	
  float x1=x0; //x1,y1 is a moving intermediate position between the beginning and target position
  float y1=y0; 
  float distTotal = abs(lineDist(deg2mmPivot(x0), deg2mmRack(y0), deg2mmPivot(xt), deg2mmRack(yt)));//Total move distance
  float tol = .5; //allowable tolerance in deg for when to stop segmenting lines and just go to the end position 
  int stepCount = round(ceil(distTotal/DotResolution));

  
  /// ATTEMPTING TO INSERT A <= symbol into the STEP COUNT BELOW 
  
  
		for (int i=0; i<=stepCount; i++ ) //i = incremented stepcounter to find intermediate drawable points along the desired slope based on the DOT resolution
		{ 
			if (((xt-tol) <= Xpos && Xpos <= (xt+tol)) && ((yt-tol) <= Ypos  && Ypos <= (yt+tol)) ){ //check if target position reached within tolerance
				break;
			} 
			
			x1 = x0 + i*(xt-x0)/stepCount; 
			y1 = y0 + i*(yt-y0)/stepCount;
			
			servoZ.write(ZdTouch); delay(DotStepDelay); Zpos=ZdTouch;  //Move UP JUST off the mug surface
			servoX.write(x1); Xpos = x1; //record current position in deg
			servoY.write(y1); Ypos = y1; //record current position in deg
			delay(DotStepDelay);
			servoZ.write(Zdmin); delay(DotStepDelay); Zpos=Zdmin;   //Move DOWN to draw a dot
			   //Delay before next lines to ensure this line is completed
		}
	//Move to original target positions & update position record
	servoX.write(xt); 	Xpos = mm2degPivot(x2); //record current position in deg
	servoY.write(yt); 	Ypos = 179-mm2degRack(y2); //record current position in deg

	delay(DotStepDelay);    //Delay before next lines to ensure this line is completed. Opted for the shorter delay time because it should already be @ the target
    //delay(LineDelay);    //Delay before next lines to ensure this line is completed
	//
}




void drawLine(float x2, float y2) { //Inputs are in mm, All Calcs within drawLine are in Deg!!
  //Note difference between positions: Original '0', Current 'pos', Ultimate Target 't', Immediate target '1'
 
  float x0 = Xpos; //current position in deg. 
  float y0 = Ypos; //current position in deg
  
  //Convert & SHIFT/INVERT instructions. Y axis inverted in Gcode & X origin position Xmin is at some number >0 deg.)
  float xt = mm2degPivot(x2);//+Xdmin; //convert target position to DEG & offset by the unusuable initial X angle
  float yt = 179-mm2degRack(y2); //convert target position to DEG
  
    //  Bring instructions within limits
  if (xt >= Xdmax) { xt = Xdmax; }
  if (xt <= Xdmin) { xt = Xdmin; }
  if (yt >= Ydmax) { yt = Ydmax; }
  if (yt <= Ydmin) { yt = Ydmin; }
 
  //Record the direction of this move for X & Y to help us correct for lost motion if the servo changes direction.
  oldDirX = newDirX; //Preserve the prior direction command
  oldDirY = newDirY; //Preserve the prior direction command
  newDirX = round((xt-x0)/abs((xt-x0+.00001))); //note the .0001 is to prevent divide by zero err. These variables are INT so it will round off. Can only be -1,0,1
  newDirY = round((yt-y0)/abs((yt-y0+.00001)));
	if (newDirX != oldDirX && newDirX != 0){
		xt = xt + BacklashAngleX*newDirX; //BacklashAngle = magnitude, newDir = direction
	}
	if (newDirY != oldDirY && newDirY != 0){
		yt = yt + BacklashAngleY*newDirY; //BacklashAngle = magnitude, newDir = direction
	}
	
  float x1=x0; //x1,y1 is a moving intermediate position between the beginning and target position
  float y1=y0; 
  float distTotal = abs(lineDist(deg2mmPivot(x0), deg2mmRack(y0), deg2mmPivot(xt), deg2mmRack(yt)));//Total move distance
  int tol = 5; //allowable tolerance in deg for when to stop segmenting lines and just go to the end position 
  int stepCount = distTotal/Resolution;

	if (distTotal > 10){  
		for (int i=0; i<stepCount; i++ ){ //i = incremented stepcounter to find intermediate drawable points along the desired slope based on the resolution 
			if (((xt-tol) <= Xpos && Xpos <= (xt+tol)) && ((yt-tol) <= Ypos  && Ypos <= (yt+tol)) ){ //check if target position reached within tolerance
				break;
			} 
			else if (stepCount <= 1){ //skip stepping if the move is already super small. 
				break;
				}
			x1 = x0 + i*(xt-x0)/stepCount; 
			y1 = y0 + i*(yt-y0)/stepCount;
			servoX.write(x1); Xpos = x1; //record current position in deg
			servoY.write(y1); Ypos = y1; //record current position in deg
			delay(StepDelay);    //Delay before next lines to ensure this line is completed
		}
	}
	//Move to original target positions & update position record
	servoX.write(xt);	Xpos = mm2degPivot(x2); //record current position in deg
	servoY.write(yt); 	Ypos = 179-mm2degRack(y2); //record current position in deg// Setting origin @ bottom left
    delay(LineDelay);    //Delay before next lines to ensure this line is completed
}

//  Raises pen
void penUp() {   //servoZ.attach( SERVOPINZ );
  //servoZ.attach( SERVOPINZ ); //I had experimented with detaching this motor when not in use to conserve power...
  servoZ.write(Zdmax); delay(penDelay); Zpos=Zdmax; 

  //servoZ.detach( );
}

//  Lowers pen
void penDown() {
  //servoZ.attach( SERVOPINZ ); //I had experimented with detaching this motor when not in use to conserve power...
  servoZ.write(Zdmin); delay(penDelay); Zpos=Zdmin;  

 // servoZ.detach( );
}

  //  Sends printer to home position without drawing on anything
  void home(){
    Zpos = Zdmax;	
	penUp();
	Xpos = Xdmin; //record current position in deg
	Ypos = Ydmax; 
    drawLine(Xmin,Ymax);
	delay(2000);
  }
  
  //Determine direct distance between two points in mm
float lineDist(float x0, float y0, float x1, float y1) { 
  //float temp = pow(pow(x1-x0, 2) + pow(y1-y0, 2), 0.5);
  return ((int) pow(pow(x1-x0, 2) + pow(y1-y0, 2), 0.5));
  }
  
  //  Draw a rectangular spiral using two points & a spiral spacing distance
void drawRectSpiral(float x0, float y0, float x1, float y1, float dec, boolean toggle)
  {
    for (int i=0; ((x1-x0)/2 > dec*i) && ((y1-y0)/2 > dec*i);i++){
    drawRect(x0+dec*i,y0+dec*i,x1-dec*i,y1-dec*i, true); 
    }
  }
  
  //  Draw a rectangle using two points
void drawRect(float x0, float y0, float x1, float y1, boolean toggle)  //inputs are in mm
  {
//  home();
  penUp();
  drawLine(x0,y0);
  if (toggle) { penDown(); }
  drawLine(x1,y0); delay(1000);
 // if (toggle) { penUp(); delay(penDelay); penDown(); }  //These intermediate pen toggles might be useful if the paper is wrinkling...
  drawLine(x1,y1); delay(1000);
  //if (toggle) { penUp(); delay(penDelay); penDown(); }
  drawLine(x0,y1); delay(1000);
 // if (toggle) { penUp(); delay(penDelay); penDown(); }
  drawLine(x0,y0); delay(1000);
  //if (toggle) { penUp(); delay(penDelay); penDown(); }
  penUp();
  }
 
   //  Draw a rectangle using two points
void drawDotRect(float x0, float y0, float x1, float y1, boolean toggle)  //inputs are in mm
  {
//  home();
  penUp();
  drawLine(x0,y0);
  if (toggle) { penDown(); }
  drawDotLine(x1,y0); delay(1000);
 // if (toggle) { penUp(); delay(penDelay); penDown(); }  //These intermediate pen toggles might be useful if the paper is wrinkling...
  drawDotLine(x1,y1); delay(1000);
  //if (toggle) { penUp(); delay(penDelay); penDown(); }
  drawDotLine(x0,y1); delay(1000);
 // if (toggle) { penUp(); delay(penDelay); penDown(); }
  drawDotLine(x0,y0); delay(1000);
  //if (toggle) { penUp(); delay(penDelay); penDown(); }
  penUp();
  }
  
   //  Draw a circle spiral! 
void drawCircleSpiral(float x0, float y0, float rad, float dec) //X position of center, y position of center, radius, spiral spacing. Input units = mm
  {
  int i = 0;
  while (rad-dec*i > Resolution) { drawCircle(x0, y0, rad-dec*i); i++; }
  }
  

//  Draw a circle!
void drawCircle(float x0, float y0, float rad) //X position of center, y position of center, radius. Input units = mm
  {
  //  Lift the pen, go to leftmost point on circle, set the pen down
  penUp(); 
  drawLine(x0-rad, y0); 
  penDown();  
  
  //  Draw the bottom half of the circle! //Algorithm is split into top & bottom half because returnY calc has a square root
  float x1, y1, dist;
  for (int i=0; i*Resolution < rad*2; i++ ){ 
    x1 = x0 + Resolution*i - rad;
    y1 = y0 + returnY(x1, x0, rad);
    dist = lineDist(deg2mmPivot(Xpos), deg2mmRack(Ypos), x1, y1);  
  
    while (dist < Resolution){
      i++;
      x1 = x0 + Resolution*i - rad;
      y1 = y0 + returnY(x1, x0, rad);
      dist = lineDist(deg2mmPivot(Xpos), deg2mmRack(Ypos), x1, y1);
      }
    drawLine(x1, y1); 
    }
  
  //  Draw the top half of the circle!
  for (int i=0; i*Resolution < rad*2; i++ )
    { 
    x1 = x0 - Resolution*i + rad;
    y1 = y0 - returnY(x1, x0, rad);
    dist = lineDist(deg2mmPivot(Xpos), deg2mmRack(Ypos), x1, y1);
    
	while (dist < Resolution){
		i++;
		x1 = x0 - Resolution*i + rad;
		y1 = y0 - returnY(x1, x0, rad);
		dist = lineDist(deg2mmPivot(Xpos), deg2mmRack(Ypos), x1, y1);
    }
	drawLine(x1, y1); 
	}
  
  //  Complete the circle, pen up!
  drawLine(x0-rad, y0);
  penUp();  
  
  }
  
  //Equation for a circle, Returns Y component given radius & x component
float returnY(float x1, float x0, float rad){
  return ((int) ((pow( pow(rad, 2) - pow((x1-x0), 2) , 0.5))));
  }
  
  //This pauses the robot for 5 seconds (5000 milliseconds) after it is turned on, per competition requirements. Then it beeps the 5 sec countdown. 
void Countdown(){  
  delay (995); 
  Buzz();
  delay (995); 
  Buzz();
  delay (995); 
  BuzzLong();
  delay (950); 
}

void Buzz() { //Increasing the duration of the buzz changes the volume drastically. Set delay to 80+ms for a loud beep!
  // digitalWrite(buzzerPin, HIGH);
  // digitalWrite(ledPin, HIGH);
  // delay(8);
  // digitalWrite(buzzerPin, LOW);
 //  digitalWrite(ledPin, LOW);

 for( int a = 0;a <100; a++){
   digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1);                       // wait for a second
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
  delay(2);
 }
}

void BuzzLong() {  //Increasing the duration of the buzz changes the volume drastically. Set delay to 80+ms for a loud beep!
 //  digitalWrite(buzzerPin, HIGH);
//   digitalWrite(ledPin, HIGH);
 //  delay(200);
 //  digitalWrite(buzzerPin, LOW);
  // digitalWrite(ledPin, LOW);
 for( int a = 0;a <100; a++){
   digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1);                       // wait for a second
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
  delay(1);
 }
}

void SweepTest() {  //Increasing the duration of the buzz changes the volume drastically. Set delay to 80+ms for a loud beep!

   for (int pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees in 1 deg steps
    servoX.write(pos);              // tell servo to go to position in variable 'pos'
	servoY.write(pos);              // tell servo to go to position in variable 'pos'
    servoZ.write(pos);              // tell servo to go to position in variable 'pos	
    delay(15);                       // waits for servo to reach the position
  }
  for (int pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 deg in 1 deg steps
    servoY.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits for servo to reach the position
  }
 
 
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//*END OF PROGRAM
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
