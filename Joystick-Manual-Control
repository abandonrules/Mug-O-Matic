/* PROGRAM DESCRIPTION & PINOUT 
Mug-O-Matic/Post-It-Plotter- Gcode Reading Program
A complicated Arduino Sketch to read gcode sent via serial by a computer running processing.

HW License: Attribution-ShareAlike CC BY-SA 4.0
Last Updated SEP 2018

Attribution Credits:
 TO UPDATE BASED ON THAT GUY WHO MOSTLY CREATED THIS<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  Modified for current use by Michael Graham, https://engineerdog.com/
  Based on work by Makerblock, http://shor.tw/110
  Based on work by Heindal, https://www.thingiverse.com/thing:667454
  Based on work by Oliv4945: https://github.com/Oliv4945/GcodeMiniCNChttps://github.com/Oliv4945/Gc
 
// The Circuit per PINOUT IMAGE http://meped.io/mepedv2
//  A0 =  (Wifi Connection if in use)
//  A1 =  (Wifi Connection if in use)
//  A2 = (Ultrasonic Echo if in use)
//  A3 = (Ultrasonic Trig if in use)
//  A4 = (SCA Connection if in use)
//  A5 = (I2C SCL Connection if in use)
//  A6 = 
//  A7 = 
//  D0 (RX) = (Bluetooth TX connection if in use)
//  D1 (TX) = (Bluetooth RX connection if in use)
//  D2(S1) =  X axis servo
//  D3~(S2)= Y axis servo
//  D4(S3) =  Z axis servo
//  D5~(S4) =  
//  D6~(S5)= 
//  D7(S6)=  
//  D8(S7) =  
//  D9~(S8) = 
//  D10~(S9) = Buzzer long leg
//  D11~ = 
//  D12 = (IR Remote Input if in use)
//  D13 = (Embedded LED on this pin)
//  Any 5V =  
//  Any GND = Buzzer short leg
*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*DECLARATIONS & CONSTANTS* 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
#include <Servo.h>

#define PIN_SERVO_CLAW 2 
#define PIN_SERVO_X 3
#define PIN_SERVO_Y 4
#define PIN_SERVO_Z 5
#define PIN_SERVO_J 6
#define PIN_SERVO_CENTER 10

#define LINE_BUFFER_LENGTH 30//512
//#define MOVEMENT_MIN 0
//#define MOVEMENT_MAX 80 
//#define STEP_DELAY 25  //ms
#define BACKLASH 1.5
//#define POSITIVE true
//#define NEGATIVE false

//Naming Components & Global Variables

Servo servoCLAW;
Servo servoX;
Servo servoY;
Servo servoZ;
Servo servoJ;
Servo servoCENTER;
const int buzzerPin = 12; //Buzzer sound output pin is the embedded LED pin
const int ledPin = 13;

float deg2mmRack(float deg) {return deg/2.25;} //  Converts mm to degrees for the servos.  2.25 is hard set by 180deg/80mm motion
float mm2degRack(float mm) {return mm*2.25;} //  Converts mm to degrees for the servos. 2.25 is hard set by 180deg/80mm motion
float deg2mmPivot(float deg) {return deg/1.5;} //  Converts mm to degrees for the servos.  2.25 is hard set by 180deg/80mm motion
float mm2degPivot(float mm) {return mm*1.5;} //(2.25/1.8)  Converts mm to degrees for the servos. 2.25 is hard set by 180deg/80mm motion

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
//*DEFINE DRAWING SETTINGS* 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////{
float BacklashAngleX = 0;//4;// deg added to all moves if a direction change occurs to account for slop/backlash in the system (This was a measured angle)
float BacklashAngleY = 0; //1 deg added to all moves if a direction change occurs to account for slop/backlash in the system (This was a measured angle)
float Resolution = 1.25;// 1.75; //mm of minimum DIRECT drawing resolution to consolidate impossible moves less than this distance into one movement of this length.
float DotResolution = .4;//1.0;// 1.75; //mm of minimum DOT drawing resolution to consolidate impossible moves less than this distance into one movement of this length.

int StepDelay = 5; //ms delay between steps to ensure steps are independent moves. 
int LineDelay = 5; //ms delay after line move to ensure move is completed
int penDelay = 250; //ms delay to ensure pen move is completed
float oldDirX =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
float newDirX =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
float oldDirY =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
float newDirY =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.


//Specific to Mug-O-Matic NEWER
//  Define Robot limits, in degrees
float Xdmin = 0;  //43 if choked up
float Xdmax = 180;//148+13; //137 if choked up
float Ydmin = 0;//2;//8-6  
float Ydmax = 180.0;//-2;  
float Zdmin = 0; // 
float Zdmax = 180.0; //  
float Jdmin = 0; // 
float Jdmax = 180.0; //  
float Cdmin = 180; //  Claw CLOSED Position
float Cdmax = 179/2; //  Claw OPEN Position

/*
//Specific to Mug-O-Matic
//  Define Robot limits, in degrees
int Xdmin = 12;  //43 if choked up
int Xdmax = 148; //137 if choked up
int Ydmin = 8;  
int Ydmax = 173;  
int Zdmin = 10; // 10. Dont want too tight or loose enough to lose contact!
int Zdmax = 50; //  Lifted Pen Position
*/

//  Calculated drawing robot limits, in mm
float Xmin = deg2mmPivot(Xdmin);
float Xmax = deg2mmPivot(Xdmax);
float Ymin = deg2mmRack(Ydmin);
float Ymax = deg2mmRack(Ydmax);
float Zmin = deg2mmRack(Zdmin);
float Zmax = deg2mmRack(Zdmax);
float Jmin = deg2mmPivot(Jdmin);
float Jmax = deg2mmPivot(Jdmax);
float Xpos = 179/2;   //Home Position (deg)
float Ypos = 179/2;  //Home Position (deg)
float Zpos = 179/2; //Home Position (deg)
float Cpos = Cdmax; //Home Position (deg)
float Jpos = 179/2;   //Home Position (deg)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
boolean verbose = false; //If 'true' then print positional feedback to arduino serial monitor, Note that this may make your robot motion slower!

int LeftButtonState = LOW; // Default state of the left button
float LeftAnalogXState = 0; //Logic variable for recording current state of this analog sensed data
float LeftAnalogYState = 0; //Logic variable for recording current state of this analog sensed data
const int LeftButtonPin = 0; // Left Joystick Button, Analog Pin #
const int LeftAnalogPinX = 1; // X axis Joystick analog pin#
const int LeftAnalogPinY = 2; // Y axis Joystick analog pin#
float SpeedL = 1.000;
float X = Xpos;
float Y = Ypos;
bool ToggleL = false;
int counterL = 0;

int RightButtonState = HIGH; // Default state of the left button
int RightAnalogXState = 0; //Logic variable for recording current state of this analog sensed data
int RightAnalogYState = 0; //Logic variable for recording current state of this analog sensed data
const int RightButtonPin = 3; // Right Joystick Button, Digital Pin #
const int RightAnalogPinX = 4;// X axis Joystick analog pin#
const int RightAnalogPinY = 5; // Y axis Joystick analog pin#
float SpeedR = 1.0;
float Z = Zpos;
float J = Jpos;
bool toggleR = false;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*SETUP*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
  Serial.begin( 9600 );
  pinMode(buzzerPin, OUTPUT);
  pinMode(ledPin, OUTPUT);
  
  //pinMode(LeftButtonPin, INPUT); //Input_pullup sets the pin to normally LOW, which then gets pull HIGH if the button (normally open) is pressed. 
  //pinMode(LeftAnalogPinX, INPUT);
  //pinMode(LeftAnalogPinY, INPUT);
  //pinMode(RightButtonPin, INPUT); //Input_pullup sets the pin to normally LOW, which then gets pull HIGH if the button (normally open) is pressed. 
  //pinMode(RightAnalogPinX, INPUT);
 // pinMode(RightAnalogPinY, INPUT);
  
 //  Countdown;
 
  servoX.attach( PIN_SERVO_X );
  servoY.attach( PIN_SERVO_Y );
  servoZ.attach( PIN_SERVO_Z );
  servoJ.attach( PIN_SERVO_J );
  servoCLAW.attach( PIN_SERVO_CLAW );
  servoCENTER.attach( PIN_SERVO_CENTER );  servoCENTER.write(179/2); //This servo pin is for assembly, it centers the servo

   home();
   
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* Main loop*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() 
  {
  
	CheckSensors();
	
	drawLine(X,Y); 
	drawLine2(Z,J); 

	//delay(50);
	 
  }

  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*Function Definitions*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  
  void CheckSensors(){ //Review all input sensors for fresh data and set the robot state
    
  LeftAnalogXState = round(analogRead(LeftAnalogPinX)/(1023.000/2.000)-1.000);//-1; //output is between 
  LeftAnalogYState = round(analogRead(LeftAnalogPinY)/(1023.000/2.000)-1.000);//-1; //output is between 
  LeftButtonState = analogRead(LeftButtonPin); //is equal to 0 only if button pressed or disconnected
  
  RightAnalogXState = round(analogRead(RightAnalogPinX)/(1023.000/2.000)-1.000);//-1; //output is between 
  RightAnalogYState = round(analogRead(RightAnalogPinY)/(1023.000/2.000)-1.000);//-1; //output is between 
  RightButtonState = analogRead(RightButtonPin); //is equal to 0 only if button pressed or disconnected
  
  if (RightButtonState == 0){
	  if ( (counterL & 0x01) == 0)
	 	   if (Cpos != Cdmax){
		   clawOpen();
	   }else{
		   clawClosed(); 
	   }
	    counterL++;
		delay(5);
  } 
  
    if (LeftButtonState == 0){
	//  Buzz();
  } 
  
      //FOR TROUBLESHOOTING
       Serial.print("LeftButtonState ");    Serial.println(LeftButtonState);
       Serial.print("LeftAnalogXState ");    Serial.println(LeftAnalogXState);
	   Serial.print("LeftAnalogYState ");    Serial.println(LeftAnalogYState);
	   Serial.print("RightButtonState ");    Serial.println(RightButtonState);
       Serial.print("RightAnalogXState ");    Serial.println(RightAnalogXState);
	   Serial.print("RightAnalogYState ");    Serial.println(RightAnalogYState);Serial.println(" ");
 
 
   X = deg2mmPivot(Xpos)-1.8*LeftAnalogYState*3; //NOTE!!!! I inverted which analog state is affecting which direction, to match the desired motion to joystick direction
   Y = deg2mmRack(Ypos)+LeftAnalogXState*4.5;
   Z = deg2mmRack(Zpos)+1.8*RightAnalogYState*4.5; //NOTE!!!! I inverted which analog state is affecting which direction, to match the desired motion to joystick direction
   J = deg2mmPivot(Jpos)-RightAnalogXState*3;
   
   
  }
	   

void drawLine(float x2, float y2) { //Inputs are in mm, All Calcs within drawLine are in Deg!!
  //Note difference between positions: Original '0', Current 'pos', Ultimate Target 't', Immediate target '1'
 
  float x0 = Xpos; //current position in deg. 
  float y0 = Ypos; //current position in deg
  
  float xt = mm2degPivot(x2);//+Xdmin; //convert target position to DEG
  float yt = mm2degRack(y2); //convert target position to DEG
  
    //  Bring instructions within limits
  if (xt >= Xdmax) { xt = Xdmax; }
  if (xt <= Xdmin) { xt = Xdmin; }
  if (yt >= Ydmax) { yt = Ydmax; }
  if (yt <= Ydmin) { yt = Ydmin; }
 
	  //Record the direction of this move for X & Y to help us correct for lost motion if the servo changes direction.
	  oldDirX = newDirX; //Preserve the prior direction command
	  oldDirY = newDirY; //Preserve the prior direction command
	  newDirX = (xt-x0)/abs((xt-x0+.0001)); //note the .0001 is to prevent divide by zero err. These variables are INT so it will round off. Can only be -1,0,1
	  newDirY = (yt-y0)/abs((yt-y0+.0001));
	
    if(verbose){
    //Serial.print("Going to ("); Serial.print(deg2mmPivot(xt)); Serial.print(", "); Serial.print(deg2mmRack(yt)); Serial.print(", "); //Serial.print(deg2mm(zt));
    //Serial.print(" mm) OR ("); 
   // Serial.print(xt); Serial.print(", "); Serial.print(yt); Serial.println(", deg )");// Serial.print(", "); //Serial.print(zt);
	}
	
  float x1=x0;
  float y1=y0;
//  float slope = (deg2mm(yt)-deg2mm(y0))/(deg2mm(xt)-deg2mm(x0)+.0001); //calc in MM!, resultant slope is unitless
  float distTotal = abs(lineDist(deg2mmPivot(x0), deg2mmRack(y0), deg2mmPivot(xt), deg2mmRack(yt)));//Total move distance
  int tol = 5; //position error tolerance in deg
  int stepCount = distTotal/Resolution;

	   
	if (distTotal > 3*Resolution){  
		for (int i=0; i<stepCount; i++ ) //i = incremented stepcounter to find intermediate drawable points along the desired slope based on the resolution
		{ 
			if (((xt-tol) <= Xpos && Xpos <= (xt+tol)) && ((yt-tol) <= Ypos  && Ypos <= (yt+tol)) ){ //check if target position reached within tolerance
				break;
			} else if (stepCount <= 1){ //skip stepping if the move is already super small. 
				break;}
			
			x1 = x0 + i*(xt-x0)/stepCount; 
			y1 = y0 + i*(yt-y0)/stepCount;
			
			servoX.write(x1);
			servoY.write(y1);
			Xpos = x1; //record current position in deg
			Ypos = y1; //record current position in deg
			delay(StepDelay);    //Delay before next lines to ensure this line is completed
		}
	}
  
	//Move to original target positions & update position record
	servoX.write(xt);
    servoY.write(yt);
	Xpos = xt; //record current position in deg
	Ypos = yt; //record current position in deg
    delay(LineDelay);    //Delay before next lines to ensure this line is completed
}

void drawLine2(float z2, float j2) { //Inputs are in mm, All Calcs within drawLine are in Deg!!
  //Note difference between positions: Original '0', Current 'pos', Ultimate Target 't', Immediate target '1'
 
  float z0 = Zpos; //current position in deg. 
  float j0 = Jpos; //current position in deg
  
  float zt = mm2degRack(z2);//+Xdmin; //convert target position to DEG
  float jt = mm2degPivot(j2); //convert target position to DEG
  
    //  Bring instructions within limits
  if (zt >= Zdmax) { zt = Zdmax; }
  if (zt <= Zdmin) { zt = Zdmin; }
  if (jt >= Jdmax) { jt = Jdmax; }
  if (jt <= Jdmin) { jt = Jdmin; }
 
    if(verbose){
   // Serial.print("Going to ("); Serial.print(deg2mmPivot(xt)); Serial.print(", "); Serial.print(deg2mmRack(yt)); Serial.print(", "); //Serial.print(deg2mm(zt));
   // Serial.print(" mm) OR ("); 
   // Serial.print(xt); Serial.print(", "); Serial.print(yt); Serial.println(", deg )");// Serial.print(", "); //Serial.print(zt);
	}
	
  float z1=z0;
  float j1=j0;
//  float slope = (deg2mm(yt)-deg2mm(y0))/(deg2mm(xt)-deg2mm(x0)+.0001); //calc in MM!, resultant slope is unitless
  float distTotal = abs(lineDist(deg2mmPivot(z0), deg2mmRack(j0), deg2mmPivot(zt), deg2mmRack(jt)));//Total move distance
  int tol = .5; //position error tolerance in deg
  int stepCount = distTotal/Resolution;

	   
	if (distTotal > 3*Resolution){  
		for (int i=0; i<stepCount; i++ ) //i = incremented stepcounter to find intermediate drawable points along the desired slope based on the resolution
		{ 
			if (((zt-tol) <= Zpos && Zpos <= (zt+tol)) && ((jt-tol) <= Jpos  && Jpos <= (jt+tol)) ){ //check if target position reached within tolerance
				break;
			} else if (stepCount <= 1){ //skip stepping if the move is already super small. 
				break;}
			
			z1 = z0 + i*(zt-z0)/stepCount; 
			j1 = j0 + i*(jt-j0)/stepCount;
			
			servoZ.write(z1);
			servoJ.write(j1);
			Zpos = z1; //record current position in deg
			Jpos = j1; //record current position in deg
			delay(StepDelay);    //Delay before next lines to ensure this line is completed
		}
	}
  
	//Move to original target positions & update position record
	servoZ.write(zt);
    servoJ.write(jt);
	Zpos = zt; //record current position in deg
	Jpos = jt; //record current position in deg
    delay(LineDelay);    //Delay before next lines to ensure this line is completed
}
   
//  Raises pen
void penUp() {   //servoZ.attach( SERVOPINZ );
  servoZ.write(Zdmax); delay(penDelay); Zpos=Zdmax;   if(verbose){Serial.println("Pen up!"); }
}

//  Lowers pen
void penDown() {
  servoZ.write(Zdmin); delay(penDelay); Zpos=Zdmin;   if(verbose){Serial.println("Pen down.");}
}

//  Opens Claw
void clawOpen() {
  servoCLAW.write(Cdmax); delay(penDelay); Cpos=Cdmax;   if(verbose){Serial.println("Claw Open");}
}
//  Closes Claw
void clawClosed() {
  servoCLAW.write(Cdmin); delay(penDelay); Cpos=Cdmin;   if(verbose){Serial.println("Claw Closed");}
}


  //  Sends printer to home position without drawing on anything
  void home(){
   // penUp();
	servoCENTER.write(179/2);
	servoX.write(179/2);
	servoY.write(179/2);
	servoZ.write(179/2);
	servoCLAW.write(179/2);
    //drawLine(Xdmin,Ydmin);
	delay(1000);
  }

//Equation for a circle, Returns Y component given radius & x component
float returnY(float x1, float x0, float rad){
  return ((int) ((pow( pow(rad, 2) - pow((x1-x0), 2) , 0.5))));
  }

//Determine direct distance between two points in mm
float lineDist(float x0, float y0, float x1, float y1) { 
  //float temp = pow(pow(x1-x0, 2) + pow(y1-y0, 2), 0.5);
  return ((int) pow(pow(x1-x0, 2) + pow(y1-y0, 2), 0.5));
  }
  
  //This pauses the robot for 5 seconds (5000 milliseconds) after it is turned on, per competition requirements. Then it beeps the 5 sec countdown. 
void Countdown(){  
  delay (995); 
  Buzz();
  delay (995); 
  Buzz();
  delay (995); 
  BuzzLong();
  delay (950); 
}

void Buzz() { //Increasing the duration of the buzz changes the volume drastically. Set delay to 80+ms for a loud beep!
   digitalWrite(buzzerPin, HIGH);
   digitalWrite(ledPin, HIGH);
   delay(8);
   digitalWrite(buzzerPin, LOW);
   digitalWrite(ledPin, LOW);

}

void BuzzLong() {  //Increasing the duration of the buzz changes the volume drastically. Set delay to 80+ms for a loud beep!
   digitalWrite(buzzerPin, HIGH);
   digitalWrite(ledPin, HIGH);
   delay(45);
   digitalWrite(buzzerPin, LOW);
   digitalWrite(ledPin, LOW);

}

