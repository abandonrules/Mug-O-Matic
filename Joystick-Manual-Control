/* 
Mug-O-Matic/Post-It-Plotter "Joystick-Manual-Control" Program

A Simple Arduino Sketch to control your TINY CNC with a single or dual joystick controller.

License: Attribution-ShareAlike CC BY-SA 4.0
Last Updated July 2018

Attribution Credits:
  Based on work by Makerblock, http://shor.tw/110
  Based on work by Heindal, https://www.thingiverse.com/thing:667454
  Based on work by Oliv4945: https://github.com/Oliv4945/GcodeMiniCNChttps://github.com/Oliv4945/Gc
  Modified for current use by Michael Graham, https://engineerdog.com/
 
// The Circuit per PINOUT IMAGE http://meped.io/mepedv2
//  A0 = Left Joystick X
//  A1 =  Left Joystick Y
//  A2 = (Ultrasonic Echo if in use)
//  A3 = (Ultrasonic Trig if in use)
//  A4 =  Right Joystick X
//  A5 =  Right Joystick Y
//  A6 = 
//  A7 = 
//  D0 (RX) = (Bluetooth TX connection if in use)
//  D1 (TX) = (Bluetooth RX connection if in use)
//  D2(S1) =  X axis servo
//  D3~(S2)= Y axis servo
//  D4(S3) =  Z axis servo
//  D5~(S4) =  
//  D6~(S5)= 
//  D7(S6)=  
//  D8(S7) =  
//  D9~(S8) = 
//  D10~(S9) =
//  D11~ = 
//  D12 = (IR Remote Input if in use)
//  D13 = (Embedded LED & Buzzer on this pin)
//  Any 5V =  
//  Any GND = Buzzer short leg
*/

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*DECLARATIONS*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Servo.h>

#define SERVOPINX 2 //Digital pin number of X-axis servo
#define SERVOPINY 3 //Digital pin number of Y-Axis servo
#define SERVOPINZ 4 //Digital pin number of Z-Azis servo
#define LINE_BUFFER_LENGTH 512 //Defines maximum number of characters per line. (Only used when reading gcode)


//Naming Components & Global Variables
Servo servoX;
Servo servoY;
Servo servoZ;
struct point { float x; float y; float z; };
struct point actuatorPos;
const int buzzerPin = 9; //Buzzer sound output pin
const int ledPin = 13;

float deg2mm(float deg) {return deg/2.25;} //  Converts mm to degrees for the servos.  2.25 is hard set by 180deg/80mm motion
float mm2deg(float mm) {return mm*2.25;} //  Converts mm to degrees for the servos. 2.25 is hard set by 180deg/80mm motion

// Define drawing settings
int OvershootThreshold = 12; //mm, minimum distance at which to break continuous motion into 2 steps to prevent overshoot.
int BrakeDist = 6; //mm, If a long move is broken into 2 steps, this is the last step.
int BacklashAngle = 2; //deg added to all moves if a direction change occurs to account for slop/backlash in the system (This was a measured angle)
int Resolution = 1; //mm of minimum drawing resolution to consolidate impossible moves less than this distance into one movement of this length.
int StepDelay = 400; //ms delay between steps to ensure steps are independent moves. 
int LineDelay = 400; //ms delay line move is completed
int penDelay = 750; //ms delay to ensure pen move is completed
int oldDirX =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
int newDirX =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
int oldDirY =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.
int newDirY =0; //-1,0,1. Place holder to record the direction of the last motion in this axis to use for backlash correction.


//Specific to Mug-O-Matic
//  Define Robot limits, in degrees
int Xdmin = 35;  //43 if choked up
int Xdmax = 155; //137 if choked up
int Ydmin = 0;  
int Ydmax = 180;  
int Zdmin = 31; // Drawing engagement position //NOTE Want to keep this tight to increase load on rotational axis to reduce overshoot
int Zdmax = 96; //  Lifted Pen Position

/* 
//Specific to Post-It-Plotter
//  Drawing Robot limits, in degrees
int Xdmin = 15;  
int Xdmax = 165; 
int Ydmin = 16;  
int Ydmax = 165;  
int Zdmin = 150; //70  // Drawing engagement position (Z-dir Reversed between post-it-Plotter & Mug-O-Matic)
int Zdmax = 18; // Lifted Pen Position
//*/


//  Calculated drawing robot limits, in mm
float Xmin = deg2mm(Xdmin);
float Xmax = deg2mm(Xdmax);
float Ymin = deg2mm(Ydmin);
float Ymax = deg2mm(Ydmax);
float Zmin = deg2mm(Zdmin);
float Zmax = deg2mm(Zdmax);


int Xpos = Xdmin;   //Home Position (deg)
int Ypos = Ydmin;  //Home Position (deg)
int Zpos = Zdmax; //Home Position (deg)

boolean verbose = true; //If 'true' then print positional feedback to arduino serial monitor.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*SETUP*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
  Serial.begin( 9600 );
  pinMode(buzzerPin, OUTPUT);
  pinMode(ledPin, OUTPUT);

  if(verbose){ //  Optional position feedback notifications
    Serial.println("Robot Activated!");
    Serial.print("Drawing Resolution is "); Serial.println(Resolution); 
    Serial.print("X range is from ("); Serial.print(Xmin); Serial.print(" to "); Serial.print(Xmax); Serial.print(" mm) or ("); Serial.print(Xdmin); Serial.print(" to "); Serial.print(Xdmax); Serial.println(") deg."); 
    Serial.print("Y range is from ("); Serial.print(Ymin); Serial.print(" to "); Serial.print(Ymax); Serial.print(" mm) or ("); Serial.print(Ydmin); Serial.print(" to "); Serial.print(Ydmax); Serial.println(") deg."); 
    Serial.print("Z range is from ("); Serial.print(Zmin); Serial.print(" to "); Serial.print(Zmax); Serial.print(" mm) or ("); Serial.print(Zdmin); Serial.print(" to "); Serial.print(Zdmax); Serial.println(") deg."); 
  }
  
   Countdown;
   home();

   
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* Main loop*
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() 
  {
 
 Check Analog sensors
   Move servo 1 to proportioned position
   If button pressed
      Buzz
      Activate 3rd servo 
 
 
 
  }

  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*Function Definitions*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  

void drawLine(float x2, float y2) { //Inputs are in mm
 
  float x0 = Xpos; //current position in deg
  float y0 = Ypos; //current position in deg
  
  float xt = mm2deg(x2); //convert target position to DEG
  float yt = mm2deg(y2); //convert target position to DEG
  
  //Record the direction of this move for X & Y to help us correct for lost motion if the servo changes direction.
  oldDirX = newDirX; //Preserve the prior direction command
  oldDirY = newDirY; //Preserve the prior direction command
  newDirX = (xt-x0)/abs((xt-x0+.001)); //note the .001 is to prevent divide by zero err. These variables are INT so it will round off. Can only be -1,0,1
  newDirY = (yt-y0)/abs((yt-y0+.001));
	if (newDirX != oldDirX){
		xt = xt + BacklashAngle*newDirX;
	}
	if (newDirY != oldDirY){
		yt = yt + BacklashAngle*newDirY;
	}
	
  //  Bring instructions within limits
  if (xt >= Xdmax) { xt = Xdmax; }
  if (xt <= Xdmin) { xt = Xdmin; }
  if (yt >= Ydmax) { yt = Ydmax; }
  if (yt <= Ydmin) { yt = Ydmin; }
  
      //Move to target positions & update positionrecord
	  servoX.write(xt);
      servoY.write(yt);
      Xpos = xt; //current position in deg
      Ypos = yt; //current position in deg
    
    if(verbose){
    Serial.print("Going to ("); Serial.print(deg2mm(xt)); Serial.print(", "); Serial.print(deg2mm(yt)); Serial.print(", "); //Serial.print(deg2mm(zt));
    Serial.print(" mm) OR ("); 
    Serial.print(xt); Serial.print(", "); Serial.print(yt); Serial.println(", deg )");// Serial.print(", "); //Serial.print(zt);
    }

    delay(LineDelay);    //Delay before next lines to ensure this line is completed
}
   
//  Raises pen
void penUp() {   //servoZ.attach( SERVOPINZ );
  //servoZ.attach( SERVOPINZ ); //I had experimented with detaching this motor when not in use to conserve power...
  servoZ.write(Zdmax); delay(penDelay); Zpos=Zdmax;   if(verbose){Serial.println("Pen up!"); }
  //servoZ.detach( );
}

//  Lowers pen
void penDown() {
  //servoZ.attach( SERVOPINZ ); //I had experimented with detaching this motor when not in use to conserve power...
  servoZ.write(Zdmin); delay(penDelay); Zpos=Zdmin;   if(verbose){Serial.println("Pen down.");}
 // servoZ.detach( );
}

  //  Sends printer to home position without drawing on anything
  void home(){
    penUp();
    servoX.write(Xdmin);  //  Set & move to initial default position
    servoY.write(Ydmin);
    delay(LineDelay);

  }


//Determine direct distance between two points in mm
float lineDist(float x0, float y0, float x1, float y1) { 
  //float temp = pow(pow(x1-x0, 2) + pow(y1-y0, 2), 0.5);
  return ((int) pow(pow(x1-x0, 2) + pow(y1-y0, 2), 0.5));
  }
  
  //This pauses the robot for 5 seconds (5000 milliseconds) after it is turned on, per competition requirements. Then it beeps the 5 sec countdown. 
void Countdown(){  
  delay (995); 
  Buzz();
  delay (995); 
  Buzz();
  delay (995); 
  BuzzLong();
  delay (950); 
}

void Buzz() { //Increasing the duration of the buzz changes the volume drastically. Set delay to 80+ms for a loud beep!
   digitalWrite(buzzerPin, HIGH);
   digitalWrite(ledPin, HIGH);
   delay(8);
   digitalWrite(buzzerPin, LOW);
   digitalWrite(ledPin, LOW);

}

void BuzzLong() {  //Increasing the duration of the buzz changes the volume drastically. Set delay to 80+ms for a loud beep!
   digitalWrite(buzzerPin, HIGH);
   digitalWrite(ledPin, HIGH);
   delay(45);
   digitalWrite(buzzerPin, LOW);
   digitalWrite(ledPin, LOW);

}
